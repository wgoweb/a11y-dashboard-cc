{"version":3,"file":"static/webpack/static\\development\\pages\\[siteId]\\[configId]\\[pageId]\\[taskId].js.757d62dc83c2a4ca8ef5.hot-update.js","sources":["webpack:///./components/TaskPageResult.tsx"],"sourcesContent":["import { withStyles, createStyles, WithStyles, Typography, Link, Paper, Box, Tabs, Tab, Theme, AppBar } from \"@material-ui/core\";\r\nimport IssuesList from \"./IssuesList\";\r\nimport React from \"react\";\r\nimport { Page, Task, Result, IssueType } from \"./models\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    tabsRoot: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    tabIndicator: {\r\n        backgroundColor: theme.palette.grey[500],\r\n        minWidth: theme.spacing(20)\r\n    },\r\n    errorTabHeader: {\r\n        color: theme.palette.error.main\r\n    },\r\n    warningTabHeader: {\r\n        color: theme.palette.warning.main\r\n    },\r\n    noticeTabHeader: {\r\n        color: theme.palette.info.main\r\n    },\r\n    tabPanelContainer: {\r\n        padding: theme.spacing(2)\r\n    }\r\n});\r\n\r\nexport interface TaskPageResultProps extends WithStyles<typeof styles> {\r\n    page: Page;\r\n    task: Task;\r\n    results: Result[];\r\n};\r\n\r\ninterface TabPanelProps {\r\n    id: string;\r\n    currentId: string;\r\n}\r\n\r\nconst TabPanel = (props: React.PropsWithChildren<TabPanelProps>) => {\r\n    const { children, currentId, id, ...other } = props;\r\n\r\n    return (\r\n        <Box\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={currentId !== id}\r\n            id={`full-width-tabpanel-${id}`}\r\n            aria-labelledby={`full-width-tab-${id}`}\r\n            {...other}\r\n        >\r\n            {children}\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst a11yProps = (tabId: string) => {\r\n    return {\r\n        id: `full-width-tab-${tabId}`,\r\n        'aria-controls': `full-width-tabpanel-${tabId}`,\r\n    };\r\n};\r\n\r\nconst TaskPageResult = (props: TaskPageResultProps) => {\r\n    const { page, task, results, classes } = props;\r\n\r\n    const issues = results.map((r) => r.issue);\r\n    const errorIssues = issues.filter((issue) => issue.type == IssueType.Error);\r\n    const warningIssues = issues.filter((issue) => issue.type == IssueType.Warning);\r\n    const noticeIssues = issues.filter((issue) => issue.type == IssueType.Notice);\r\n\r\n    const completedDate = new Date(task.completedDate * 1000);\r\n\r\n    const [currentTabId, setCurrentTabId] = React.useState<string>(IssueType.Error);\r\n\r\n    const handleTabChange = (event: React.ChangeEvent<{}>, newTabId: string) => {\r\n        setCurrentTabId(newTabId);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n                {page.title}\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n                <Link href={page.url} target=\"_blank\">\r\n                    {page.url}\r\n                </Link>\r\n                <br />\r\n                <em>Last scanned at {completedDate.toLocaleDateString()} {completedDate.toLocaleTimeString()}</em>\r\n            </Typography>\r\n\r\n            <div className={classes.tabsRoot}>\r\n                <Paper>\r\n                    <Tabs classes={{ indicator: classes.tabIndicator }} value={currentTabId} onChange={handleTabChange} aria-label=\"A11y results tabs by types\">\r\n                        <Tab className={classes.errorTabHeader} label={`Errors (${errorIssues.length})`} value={IssueType.Error} {...a11yProps(IssueType.Error)} />\r\n                        <Tab className={classes.warningTabHeader} label={`Warnings (${warningIssues.length})`} value={IssueType.Warning} {...a11yProps(IssueType.Warning)} />\r\n                        <Tab className={classes.noticeTabHeader} label={`Notices (${noticeIssues.length})`} value={IssueType.Notice} {...a11yProps(IssueType.Notice)} />\r\n                    </Tabs>\r\n                </Paper>\r\n                <Box className={classes.tabPanelContainer}>\r\n                    <TabPanel currentId={currentTabId} id={IssueType.Error}>\r\n                        <IssuesList issues={errorIssues} issueType={IssueType.Error} />\r\n                    </TabPanel>\r\n                    <TabPanel currentId={currentTabId} id={IssueType.Warning}>\r\n                        <IssuesList issues={warningIssues} issueType={IssueType.Warning} />\r\n                    </TabPanel>\r\n                    <TabPanel currentId={currentTabId} id={IssueType.Notice}>\r\n                        <IssuesList issues={noticeIssues} issueType={IssueType.Notice} />\r\n                    </TabPanel>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withStyles(styles)(TaskPageResult);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAlsourceRoot":""}